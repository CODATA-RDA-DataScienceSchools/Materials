---
title: "R Ecology Lesson"
authors: 
  - name: Bianca Peterson (Ph.D.)
    orcid: 0000-0001-6927-9159
    email: bianca@fathomdata.dev
    affiliations:
      - Fathom Data
format:
  revealjs: 
    theme: dark
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    auto-stretch: false
    css: styles.css
    logo: images/logo.png
    footer: <https://bit.ly/3ODtPGj>
---

```{r, cache = FALSE, include=FALSE}
#install.packages("devtools")
#devtools::install_github("EvaMaeRey/flipbookr")

library(tidyverse)
# library(plotly)
# library(printr)
# library(knitr)
# library(pagedown)
```

## Attribution {.hcenter}

This lesson is based on the [Ecology Data Carpentry lesson](https://datacarpentry.org/R-ecology-lesson/index.html).

All Data Carpentry instructional material is made available under the Creative Commons Attribution license.

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   Vectors
-   Missing data
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## Install required R packages

```{r}
#| echo: true
#| eval: false

install.packages(c("tidyverse", "hexbin", "patchwork"))
```

## Download the data {.hcenter}

We will download the data directly from R during the lessons. However, if you are expecting problems with the network, it may be better to download the data beforehand and store it on your machine.

The data files for the lesson can be downloaded manually here: https://doi.org/10.6084/m9.figshare.1314459

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   [What is R and RStudio]{.red}
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   Vectors
-   Missing data
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## What is R and RStudio? {.smaller .hcenter}

-   [R `->` both the programming language and the software that interprets the scripts]{.medium}

-   [RStudio `->` a front end (interface) to R, which makes using R a lot nicer]{.medium}

## Why learn R? {.smaller .hcenter}

-   R doesn't involve lots of pointing and clicking - easy to redo analysis if you collected more data.
-   R code is great for `reproducibility` - obtain same results from same dataset using same analysis.
-   R is `extensible` and `interdisciplinary` - ~20,000 packages to extend its capabilities, and statistical approaches from many scientific disciplines can be combined.
-   R works on `data of all shapes and sizes` - it is designed for data analysis.
-   R produces `high-quality graphics` - can adjust any aspect of your graph.
-   R has a `large community` - mailing lists and websites (Stack Overflow).
-   R is `open-source` and `cross-platform` - Anyone can inspect the source code.
-   Less chance for mistakes.

## What can you do in RStudio? {.smaller .hcenter}

![](images/math.png){fig-align="center" width="700"}

## What can you do in RStudio? {.smaller .hcenter}

![](images/statistics.PNG){fig-align="center" width="700"}

## What can you do in RStudio? {.smaller .hcenter}

![](images/analyse.png){fig-align="center" width="500"}

## What can you do in RStudio? {.smaller .hcenter}

![](images/visualisation.png){fig-align="center" width="850"}

## What can you do in RStudio? {.smaller .hcenter}

![](images/functions.png){fig-align="center" width="500"}

## What can you do in RStudio? {.smaller .hcenter}

![](images/rmarkdown.png){fig-align="center" width="900"}

## What can you do in RStudio? {.smaller .hcenter}

![](images/presentation.png){fig-align="center" width="700"}

## What can you do in RStudio? {.smaller .hcenter}

![](images/rticles.png){fig-align="center" width="150"}

## What can you do in RStudio? {.smaller .hcenter}

![](images/books.png){fig-align="center"}

## What can you do in RStudio? {.smaller .hcenter}

![](images/databases.jpg){fig-align="center"}

## What can you do in RStudio? {.smaller .hcenter}

![](images/webscraping.png){fig-align="center"}

## What can you do in RStudio? {.smaller .hcenter}

![](images/dashboard.jpg){fig-align="center"}

## What can you do in RStudio? {.smaller .hcenter}

![](images/versioncontrol.png){fig-align="center"}

![](images/versioncontrol2.jpeg){fig-align="center" width="500"}

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   [RStudio layout]{.red}
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   Vectors
-   Missing data
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## Layout of RStudio {.smaller .hcenter}

![](images/Layout2.PNG)

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   [Creating a reproducible project]{.red}
-   Object assignment
-   Functions and arguments
-   Vectors
-   Missing data
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## Create a new project {.hcenter}

-   It is good practice to keep a set of related data, analyses and text in single folder called the `working directory`.
-   You can easily share it with others without worrying about whether or not underlying scripts will still work.
-   Only ever use relative paths and not absolute paths.

## Absolute vs relative paths {.hcenter}

![](images/Absolute_vs_relative.PNG){fig-align="center" width="800"}

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Your working directory should look like this {.smaller .hcenter}

![](images/File_structure.PNG){fig-align="center" width="400"}

[Working directory]{.red} = where R looks for files that you ask it to load, and where it will put any files that you ask it to save.

## Interacting with R {.smaller .hcenter}

-   We write code/instructions = commands
-   The computer executes/runs those commands
-   Two ways to interact with R:
    -   Type in the console and press `Enter` to execute -\> forgotten when closed
    -   Type in script editor and press `Ctrl/Cmd + Enter` -\> save code and workflow
-   Prompt `>` is displayed when R is ready to accept commands
-   Receives commands (typing, copy-pasting or sent from script editor) -\> execute -\> show results -\> new prompt
-   If R waits for more data -\> will show a `+` prompt (continuation symbol), which means you haven't finished entering a complete command
-   Either enter the missing letter/value/symbol or click inside the console and press `Esc`

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Seeking help (1/3) {.smaller .hcenter}

-   Use built-in RStudio help interface (bottom-right panel)
-   Search function documentation with ? and ??
    -   `?function`
    -   `??task`
-   `help(function)`
-   Automatic code completion
    -   Reminder of a function's name or arguments
    -   Avoid spelling errors
-   Package vignettes and cheat sheets
    -   Instructions for how to use the package
    -   `browseVignettes()`
    -   Cheat sheets, keyboard shortcuts, and more, available in the Help menu (at the top of the RStudio window)

## Seeking help (2/3) {.smaller .hcenter}

-   Finding more functions and packages
    -   Help only searches installed packages
    -   To search all available packages, use rdocumentation.org website
    -   Google `R <task>`
    -   Many packages also have websites with additional help, tutorials, etc.
-   Dealing with error messages

![](images/errors.png){fig-align="center"}

## Seeking help (3/3) {.smaller .hcenter}

-   Where to ask for help:
    -   Friendly colleagues
    -   Stack Overflow: [http://stackoverflow.com/questions/tagged/r](http://stackoverflow.com/questions/tagged/r)
    -   R-help mailing list: [https://stat.ethz.ch/mailman/listinfo/r-help](https://stat.ethz.ch/mailman/listinfo/r-help)
        -   Use correct vocabulary
        -   Check for package-specific mailing lists
        -   List of topic-specific mailing lists: [http://www.r-project.org/mail.html](http://www.r-project.org/mail.html)

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   [Object assignment]{.red}
-   Functions and arguments
-   Vectors
-   Missing data
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   [Functions and arguments]{.red}
-   Vectors
-   Missing data
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## Structure of R expressions {.smaller .hcenter}

![](images/R_expressions.PNG){fig-align="center"}

-   object = can be any word you like, but avoid dots (and no spaces!)
    -   also watch out for existing function names
-   `<-` = assignment operator (Shortcut: `Alt -`)
-   function = name of the function followed directly by ()
    -   Example: `x <- round(3.14159)`
-   arguments = specified within the `()` of the function, separated by commas
    -   Example: `x <- round(3.14159, digits = 2)`

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   [Vectors]{.red}
-   Missing data
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## Data structures vs Data types {.hcenter}

::: columns
::: {.column width="50%"}
Data structures:

-   Vector
-   Matrix
-   Array
-   Data Frame
-   List
-   Factor
:::

::: {.column width="50%"}
Data types:

-   Numeric
-   Integer
-   Complex
-   Logical
-   Character
:::
:::

## Data structures {.hcenter .smaller}

![](images/data_structures.png){fig-align="center"}

[Credit: [Maite Ceballos (IFCA) & Nicolas Cardiel (UCM)](http://venus.ifca.unican.es/Rintro/dataStruct.html)]{.small}

## Data types {.hcenter .smaller}

![](images/data_types.png){fig-align="center"}

[Credit: [Venkatesan Prabu .J (Wikitechy)](https://www.wikitechy.com/tutorials/r-programming/r-datatypes-vectors)]{.small}

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   Vectors
-   [Missing data]{.red}
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   Vectors
-   Missing data
-   [Data frames]{.red}
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## Importing data with `read_csv()` {.hcenter .smaller}

-   Sometimes there are a few lines of metadata at the top of the file:

    -   You can use skip the first "n" lines: `read_csv("data.csv", skip = 5)`
    -   Or drop all lines that start with a certain character, e.g. "\#": `read_csv("data.csv", comment = "#")`

-   The data might not have column names:

    -   You can use `col_names = FALSE` to tell `read_csv()` not to treat the first row as headings, and instead label them sequentially from X1 to Xn: `read_csv("data.csv", col_names = FALSE)`
    -   Alternatively, pass `header` a character vector with column names: `read_csv("data.csv", col_names = c("name", "surname", "age", "weight"))`

-   Specify the value(s) that are used to represent missing values in your file: `read_csv("data.csv", na = ".")`

-   Trim whitespace: `read_csv("data.csv", trim_ws = TRUE)`

## Data frames {.hcenter}

![](images/dataframe2.png){fig-align="center"}

## Tidy data {.hcenter}

![](images/dataframes.png){fig-align="center"}

## The survey data {.hcenter}

-   The data consists of a survey of animals where the following variables were recorded:

    -   record_id, month, day, year, plot_id, species_id, sex, hindfoot_length, weight, genus, species, taxon, plot_type
    -   a description of each variable is available [here](https://datacarpentry.org/R-ecology-lesson/02-starting-with-data.html)

-   The data set is stored as a comma separated value (CSV) file

-   Each row contains information about a single animal

-   Each column represents a single variable

## Data types {.hcenter}

![](images/data_types2.png){fig-align="center"}

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   Vectors
-   Missing data
-   Data frames
-   [Factors]{.red}
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## Factors {.hcenter}

```{r}
#| echo: true

x <- factor(c("wallet", "gum", "lotion", "sanitiser", "lip-gloss"))
levels(x)
```

![](images/Handbag2.png){fig-align="center" width="300"}

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   Vectors
-   Missing data
-   Data frames
-   Factors
-   [Formatting dates]{.red}
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## Formatting dates {.hcenter}

![](images/Dates.PNG){fig-align="center"}

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   Vectors
-   Missing data
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   [Data manipulation]{.red}
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## Data manipulation using `dplyr` and `tidyr` {.hcenter .smaller}

-   dplyr package makes tabular data manipulation easier
-   tidyr package enables you to convert between different data formats for plotting and analysis
-   New functions/analyses are developed and made available via packages
-   Packages = additional functions that let you do more stuff
-   Install package once - install.packages()
-   Load package with every R session when you need it
-   tidyverse = umbrella package that installs several packages

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Pipes {.hcenter}

![](images/Pipes.PNG){fig-align="center"}

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Split-apply-combine analysis {.hcenter}

![](images/split-apply-combine.png){fig-align="center" width="800"}

[It collapses each group into a single-row summary of that group]{.verysmall}

[Credit: Modified from [Ranae Dietzel & Andee Kaplan](https://agron590-isu.github.io/materials/week_08/dplyr/slides_dplyr.html)]{.verysmall}

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Reshaping your data: `pivot_wider` {.hcenter}

![](images/pivot_wider_graphic.png){fig-align="center"}

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Reshaping your data: `pivot_longer` {.hcenter}

![](images/pivot_longer_graphic.png){fig-align="center"}

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Cleaning and subsetting data {.hcenter}

![](images/Surveys_complete.PNG){fig-align="center" width="700"}

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   Vectors
-   Missing data
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   [Data visualisation with ggplot2]{.red}
    -   [Scatter plot]{.red}
    -   [Boxplot]{.red}
    -   [Line graph]{.red}
    -   [Bar graph]{.red}
    -   [Interactive plots]{.red}
-   Additional functions
-   Additional resources
-   Summary
:::
:::

## Data visualisation: grammar of graphics {.hcenter .smaller}

Grammar of graphics = a framework which follows a layered approach to describe and construct visualisations or graphics in a structured manner

plot = [data]{.red} + [aesthetics]{.green} + [geometry]{.blue}

-   `<data>` = refers to a data frame (data set)
-   `<aesthetics>` = indicates x and y variables & how data should be displayed in the plot (e.g. color, size, shape)
-   `<geometry>` = refers to the type of graphics (bar chart, histogram, box plot, line plot, density plot, etc.)

## Data visualisation: grammar of graphics {.hcenter}

![](images/grammar_of_graphics.PNG){fig-align="center" width="600"}

## Data visualisation: grammar of graphics {.hcenter}

![](images/grammar_of_graphics3.png){fig-align="center" width="600"}

## Time for... {.hcenter}

![](images/Practical.PNG){fig-align="center"}

## Plot components {.hcenter}

![](images/plot_description.PNG){fig-align="center"}

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   Vectors
-   Missing data
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   [Additional functions]{.red}
-   Additional resources
-   Summary
:::
:::

## Some other useful functions (1/5) {.hcenter}

```{r}
#| echo: true
#| message: false
#| warning: false 
#| eval: false

# Import data by browsing for file
my_data <- read.csv(file.choose(new = TRUE))

# Import Excel file (per sheet)
library(readxl)

read_excel("data/my_data.xlsx", sheet = "Sheet1")
```

## Some other useful functions (2/5) {.hcenter}

```{r}
#| echo: true
#| message: false
#| warning: false
#| eval: false

# Update a package
tidyverse_update()

# Helper function to use within filter():
between(weight, 30, 50)

# Helper functions to use within select():
ends_with("xyz")
contains("cde")
select(df, col5, col6, everything())

# Create and keep only the new column:
transmute(df, new_column = old_column*2)

# Global substitutions (i.e. find and replace):
gsub(pattern, replacement, data)
```

## Some other useful functions (3/5) {.hcenter}

```{r}
#| echo: true
#| message: false
#| warning: false
#| eval: false

# Remove an object from the environment
rm(object_name)

# Detach (i.e. "unload") a package
detach(tidyverse)

# Pick the top one (from arranged data)
dataframe %>%
  filter(!is.na(var1)) %>% 
  arrange(var1, var2, var3) %>% 
  slice(1)

dataframe %>%
  filter(!is.na(var1)) %>% 
  arrange(var1, var2, var3) %>% 
  top_n(1)
```

## Some other useful functions (4/5) {.hcenter}

```{r}
#| echo: true
#| message: false
#| warning: false
#| eval: false

# Divide data into categories:
mutate(category = case_when(weight <= 100 ~ "small",
                            weight > 100 & weight < 200 ~ "medium",
                            weight > 200 ~ "large"))

# Rename specific column headers:
rename(df, new_name = old_name)

# Top 10 heaviest animals:
top_n(df, 10, weight)

# Separate (i.e. split) one column into multiple:
separate(column, into = c("col1", "col2"))

# Bind tables on columns or rows
cbind(df1, df2, ...)
rbind(df1, df2, ...)
```

## Some other useful functions (5/5) {.hcenter}

```{r}
#| echo: true
#| message: false
#| warning: false
#| eval: false

# Mutating joins: combine variables from two data.frames
inner_join(x, y, by = "key") #keeps all observations in both x and y.
left_join(x, y, by = "key")  #keeps all observations in x.
right_join(x, y, by = "key") #keeps all observations in y.
full_join(x, y, by = "key")  #keeps all observations in x and y.

# Filtering joins: keep cases from the left-hand data.frame
semi_join(x, y) #keeps all observations in x that have a match in y.
anti_join(x, y) #drops all observations in x that have a match in y.

# Nesting joins: create a list column of data.frames
nest_join(x, y, by = "key") #keeps all rows and all columns from x 
                            #and adds a list column of tibbles

# Set operations: compare values of every variable
intersect(x, y) #return only observations in both x and y.
union(x, y)     #return unique observations in x and y.
setdiff(x, y)   #return observations in x that are not in y.
```

## Joins {.hcenter}

![](images/joins.png){fig-align="center" width="450"}

## IF statements {.hcenter}

```{r}
#| echo: true
#| eval: false

if (condition) {
  # code executed when condition is TRUE
} else {
  # code executed when condition is FALSE
}


if (this) {
  # do this
} else if (that) {
  # do that
} else {
  # do something else
}
```

## IF statements {.hcenter}

```{r}
#| echo: true
#| eval: false

temp <- 15

if (temp <= 0) {
  "freezing"
} else if (temp <= 10) {
  "cold"
} else if (temp <= 20) {
  "cool"
} else if (temp <= 30) {
  "warm"
} else {
  "hot"
}
```

## Writing your own function {.hcenter .smaller}

-   Functions allow you to automate common tasks instead of copy-and-pasting
-   Writing a function has 3 main advantages over using copy-and-paste:
    -   You can give a function an evocative name that makes your code easier to understand.
    -   As requirements change, you only need to update code in one place, instead of many.
    -   You eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).

## Writing your own function {.hcenter}

```{r}
#| echo: true
#| eval: false

function_name <- function(x) {
  y <- read.csv(x)
  
  y %>% 
    count(variable)
}

# Example

get_species <- function(x) {
  y <- read.csv(x)
  
  y %>% 
    count(species)
}
```

## Useful shortcuts {.hcenter .smaller}

-   `Ctrl + Shift + N` = New script
-   `Alt + "-"` = Assignment operator `<-`
-   `Ctrl + Enter` = Run selected command(s)
-   `Ctrl + Shift + S` = Run the whole script
-   `Ctrl + Shift + R` = Create script headers
-   `Alt + Shift + K` = Keyboard shortcut quick reference
-   `F1` (when function is highlighted in pop-up tooltip) = activates help window
-   `Ctrl + Shift + M` = Insert pipe character `%>%`

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   Vectors
-   Missing data
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   [Additional resources]{.red}
-   Summary
:::
:::

## Additional Resources {.hcenter .smaller}

-   RStudio Resources
    -   [R Graph Gallery](https://www.r-graph-gallery.com/)
    -   [RStudio Primers](https://rstudio.cloud/learn/primers)
    -   [Webinars & Videos](https://resources.rstudio.com/)
    -   [Cheat Sheets](https://rstudio.com/resources/cheatsheets/)
    -   [Educational Material for Learners or Teachers](https://education.rstudio.com/)
    -   [A Gentle Introduction to Tidy Statistics in R](https://resources.rstudio.com/webinars/a-gentle-introduction-to-tidy-statistics-in-r)

## Additional Resources {.hcenter .smaller}

-   Interactive learning
    -   `install.packages("swirl")`
    -   `library(swirl)`
    -   Follow the on-screen instructions
-   [Books](https://rstudio.com/resources/books/)
-   [Introduction to R](https://cran.r-project.org/doc/manuals/R-intro.pdf)
-   [R FAQ](https://cran.r-project.org/doc/FAQ/R-FAQ.html)
-   Follow #rstats on twitter and ask questions there (also check out @RLangTips)

## Objectives {.smaller .hcenter}

::: columns
::: {.column width="50%"}
-   What is R and RStudio
-   RStudio layout
-   Creating a reproducible project
-   Object assignment
-   Functions and arguments
-   Vectors
-   Missing data
-   Data frames
-   Factors
-   Formatting dates
:::

::: {.column width="50%"}
-   Data manipulation
-   Data visualisation with ggplot2
    -   Scatter plot
    -   Boxplot
    -   Line graph
    -   Bar graph
    -   Interactive plots
-   Additional functions
-   Additional resources
-   [Summary]{.red}
:::
:::

## Summary {.hcenter}

-   RStudio projects give you a solid workflow that will serve you well in the future:
    -   Create an RStudio project for each data analysis project
    -   Create a file structure that is logical and reusable - helps to automate future work
    -   Keep raw data files there
    -   Keep scripts there
    -   Save your outputs (plots and cleaned data) there
    -   Only ever use relative paths, not absolute paths
